<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Intro on PMem.io</title><link>https://pmem.io/tags/intro/</link><description>Recent content in Intro on PMem.io</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 20 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://pmem.io/tags/intro/index.xml" rel="self" type="application/rss+xml"/><item><title>Dockers usage in PMDK</title><link>https://pmem.io/blog/2022/12/dockers-usage-in-pmdk/</link><pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate><guid>https://pmem.io/blog/2022/12/dockers-usage-in-pmdk/</guid><description>In this blog post, I&amp;rsquo;ll describe why we believe dockers are easy to use, time-saving, and valuable for day-to-day programming and debugging. If you have never heard of dockers (or containers in general), please read, for example, this overview. We use dockers in almost all of the repositories in our organization. In this blog post, I will describe how we use dockers based on the PMDK repository. In some of our repositories, like in memkind, we use a bit different approach, but it still relies on docker.</description></item><item><title>Introduction to libpmem2 (part 1)</title><link>https://pmem.io/blog/2022/06/introduction-to-libpmem2-part-1/</link><pubDate>Thu, 30 Jun 2022 10:00:00 +0000</pubDate><guid>https://pmem.io/blog/2022/06/introduction-to-libpmem2-part-1/</guid><description>A new beginning This blog post will be about the recently created library libpmem2, which is a part of PMDK repository. Before we go into details it&amp;rsquo;s worth having a short look at the history. About seven years ago, the first persistent memory library known as libpmem was started. The concept of persistent memory was becoming a reality. Initially, libpmem provided simple support for memory memory management on pmem. Over time, the development of hardware, software, as well as changing customer needs made it necessary to evolve the library to include new features such as support for Windows, DevDax, RAS, eADR, and others.</description></item><item><title>Introduction to pmemstream</title><link>https://pmem.io/blog/2022/01/introduction-to-pmemstream/</link><pubDate>Wed, 26 Jan 2022 00:00:00 +0000</pubDate><guid>https://pmem.io/blog/2022/01/introduction-to-pmemstream/</guid><description>What is pmemstream? Libpmemstream implements a pmem-optimized log data structure and provides stream-like access to data. It presents a contiguous logical address space, divided into regions, with log entries of arbitrary size. We intend for this library to be a foundation for various, more complex higher-level solutions. Read on to learn about a few example use cases we have in mind. Like most libraries in the PMDK family, this one also focuses on delivering a generic, easy-to-use set of functions.</description></item></channel></rss>