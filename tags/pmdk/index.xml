<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PMDK on PMem.io</title><link>https://pmem.io/tags/pmdk/</link><description>Recent content in PMDK on PMem.io</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 20 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://pmem.io/tags/pmdk/index.xml" rel="self" type="application/rss+xml"/><item><title>Dockers usage in PMDK</title><link>https://pmem.io/blog/2022/12/dockers-usage-in-pmdk/</link><pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate><guid>https://pmem.io/blog/2022/12/dockers-usage-in-pmdk/</guid><description>In this blog post, I&amp;rsquo;ll describe why we believe dockers are easy to use, time-saving, and valuable for day-to-day programming and debugging. If you have never heard of dockers (or containers in general), please read, for example, this overview. We use dockers in almost all of the repositories in our organization. In this blog post, I will describe how we use dockers based on the PMDK repository. In some of our repositories, like in memkind, we use a bit different approach, but it still relies on docker.</description></item><item><title>Update on PMDK and our long term support strategy</title><link>https://pmem.io/blog/2022/11/update-on-pmdk-and-our-long-term-support-strategy/</link><pubDate>Wed, 16 Nov 2022 00:00:00 +0200</pubDate><guid>https://pmem.io/blog/2022/11/update-on-pmdk-and-our-long-term-support-strategy/</guid><description>Following Intel’s Q2 earnings call announcing the wind-down of Intel’s Optane business, Intel will also be winding down its investment in new feature development on Persistent Memory Development Kit (PMDK) libraries and adjusting long-term support and maintenance plans accordingly.
The PMDK collection of open-source libraries and tools hosted on GitHub will continue to be available to the software community. Documentation and resources via the pmem.io website will also remain available.</description></item><item><title>Introduction to pmemstream</title><link>https://pmem.io/blog/2022/01/introduction-to-pmemstream/</link><pubDate>Wed, 26 Jan 2022 00:00:00 +0000</pubDate><guid>https://pmem.io/blog/2022/01/introduction-to-pmemstream/</guid><description>What is pmemstream? Libpmemstream implements a pmem-optimized log data structure and provides stream-like access to data. It presents a contiguous logical address space, divided into regions, with log entries of arbitrary size. We intend for this library to be a foundation for various, more complex higher-level solutions. Read on to learn about a few example use cases we have in mind. Like most libraries in the PMDK family, this one also focuses on delivering a generic, easy-to-use set of functions.</description></item><item><title>Disaggregated Memory - In pursuit of scale and efficiency</title><link>https://pmem.io/blog/2022/01/disaggregated-memory-in-pursuit-of-scale-and-efficiency/</link><pubDate>Fri, 21 Jan 2022 10:00:00 +0100</pubDate><guid>https://pmem.io/blog/2022/01/disaggregated-memory-in-pursuit-of-scale-and-efficiency/</guid><description>A software person perspective on new upcoming interconnect technologies.
Existing Server Landscape Servers are expensive. And difficult to maintain properly. That&amp;rsquo;s why most people turn to the public cloud for their hosting and computing needs. Dynamic virtual server instances have been key to unlocking efficiency gains for both Cloud Service Providers (CSPs) and their users. CSPs can leverage virtualization to colocate many workloads on fewer physical servers. And cloud users have access to a huge pool of on-demand processing power, only having to pay for what they use.</description></item><item><title>What is PMDK (Persistent Memory Development Kit)?</title><link>https://pmem.io/knowledgebase/faq/100000009-what-is-pmdk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/knowledgebase/faq/100000009-what-is-pmdk/</guid><description>Answer The Persistent Memory Development Kit (PMDK), formerly known as the Non-Volatile Memory Library (NVML), is a collection of libraries and tools designed to support development of persistent-memory-aware applications. The open source PMDK project currently supports ten libraries, which are targeted at various use cases for persistent memory with language support for C, C++, Java*, and Python*. The PMDK also includes tools like the pmemcheck plug-in for the open source toolset, valgrind, and an increasing body of documentation, code examples, tutorials, and blog entries.</description></item><item><title>What programming languages does PMDK (Persistent Memory Development Kit) support?</title><link>https://pmem.io/knowledgebase/faq/100000011-what-languages-does-pmdk-support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/knowledgebase/faq/100000011-what-languages-does-pmdk-support/</guid><description>Answer The Persistent Memory Development Kit (PMDK) core libraries provide C APIs. Libraries such as libpmemobj provide C++ APIs. Higher level libraries such as libpmemkv, a key-value store for persistent memory, support C, C++, Javascript, Java, Ruby, and Python.</description></item><item><title>Why use PMDK (Persistent Memory Development Kit)?</title><link>https://pmem.io/knowledgebase/faq/100000010-why-use-pmdk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/knowledgebase/faq/100000010-why-use-pmdk/</guid><description>Answer The Persistent Memory Development Kit (PMDK) is designed to solve persistent memory challenges and facilitate the adoption of persistent memory programming. It offers developers well-tested, production-ready libraries and tools in a comprehensive implementation of the Storage Networking Industry Association Non-Volatile Memory (SNIA NVM) programming model.</description></item></channel></rss>