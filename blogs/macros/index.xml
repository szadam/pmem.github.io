<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>macros on PMem.io</title><link>https://pmem.io/blogs/macros/</link><description>Recent content in macros on PMem.io</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 11 Jun 2015 19:55:17 -0700</lastBuildDate><atom:link href="https://pmem.io/blogs/macros/index.xml" rel="self" type="application/rss+xml"/><item><title>Type safety macros in libpmemobj</title><link>https://pmem.io/blog/2015/06/type-safety-macros-in-libpmemobj/</link><pubDate>Thu, 11 Jun 2015 19:55:17 -0700</pubDate><guid>https://pmem.io/blog/2015/06/type-safety-macros-in-libpmemobj/</guid><description>The PMEMoid plays the role of a persistent pointer in a pmemobj pool. It consist of a shortened UUID of the pool which the object comes from and an offset relative to the beginning of the pool:
typedef struct pmemoid { uint64_t pool_uuid_lo; uint64_t off; } PMEMoid; Operating on such persistent pointers is equivalent to operating on raw pointers to volatile objects represented by void *. This approach is error prone and such errors are very hard to find.</description></item></channel></rss>