<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PMemStream on PMem.io</title><link>https://pmem.io/pmemstream/</link><description>Recent content in PMemStream on PMem.io</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://pmem.io/pmemstream/index.xml" rel="self" type="application/rss+xml"/><item><title>libpmemstream</title><link>https://pmem.io/pmemstream/manpages/master/libpmemstream.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemstream/manpages/master/libpmemstream.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
SEE ALSO
NAME libpmemstream - a logging data structure optimized for persistent memory.
SYNOPSIS #include &amp;lt;libpmemstream.h&amp;gt; struct pmemstream; struct pmemstream_entry_iterator; struct pmemstream_region_iterator; struct pmemstream_region_runtime; struct pmemstream_region { uint64_t offset; }; struct pmemstream_entry { uint64_t offset; }; struct pmemstream_async_wait_data; struct pmemstream_async_wait_output { int error_code; }; FUTURE(pmemstream_async_wait_fut, struct pmemstream_async_wait_data, struct pmemstream_async_wait_output); int pmemstream_from_map(struct pmemstream **stream, size_t block_size, struct pmem2_map *map); void pmemstream_delete(struct pmemstream **stream); int pmemstream_region_allocate(struct pmemstream *stream, size_t size, struct pmemstream_region *region); int pmemstream_region_free(struct pmemstream *stream, struct pmemstream_region region); size_t pmemstream_region_size(struct pmemstream *stream, struct pmemstream_region region); size_t pmemstream_region_usable_size(struct pmemstream *stream, struct pmemstream_region region); int pmemstream_region_runtime_initialize(struct pmemstream *stream, struct pmemstream_region region, struct pmemstream_region_runtime **runtime); int pmemstream_reserve(struct pmemstream *stream, struct pmemstream_region region, struct pmemstream_region_runtime *region_runtime, size_t size, struct pmemstream_entry *reserved_entry, void **data); int pmemstream_publish(struct pmemstream *stream, struct pmemstream_region region, struct pmemstream_region_runtime *region_runtime, struct pmemstream_entry entry, size_t size); int pmemstream_append(struct pmemstream *stream, struct pmemstream_region region, struct pmemstream_region_runtime *region_runtime, const void *data, size_t size, struct pmemstream_entry *new_entry); int pmemstream_async_publish(struct pmemstream *stream, struct pmemstream_region region, struct pmemstream_region_runtime *region_runtime, struct pmemstream_entry entry, size_t size); int pmemstream_async_append(struct pmemstream *stream, struct vdm *vdm, struct pmemstream_region region, struct pmemstream_region_runtime *region_runtime, const void *data, size_t size, struct pmemstream_entry *new_entry); uint64_t pmemstream_committed_timestamp(struct pmemstream *stream); uint64_t pmemstream_persisted_timestamp(struct pmemstream *stream); struct pmemstream_async_wait_fut pmemstream_async_wait_committed(struct pmemstream *stream, uint64_t timestamp); struct pmemstream_async_wait_fut pmemstream_async_wait_persisted(struct pmemstream *stream, uint64_t timestamp); const void *pmemstream_entry_data(struct pmemstream *stream, struct pmemstream_entry entry); size_t pmemstream_entry_size(struct pmemstream *stream, struct pmemstream_entry entry); uint64_t pmemstream_entry_timestamp(struct pmemstream *stream, struct pmemstream_entry entry); int pmemstream_entry_iterator_new(struct pmemstream_entry_iterator **iterator, struct pmemstream *stream, struct pmemstream_region region); int pmemstream_entry_iterator_is_valid(struct pmemstream_entry_iterator *iterator); void pmemstream_entry_iterator_next(struct pmemstream_entry_iterator *iterator); void pmemstream_entry_iterator_seek_first(struct pmemstream_entry_iterator *iterator); struct pmemstream_entry pmemstream_entry_iterator_get(struct pmemstream_entry_iterator *iterator); void pmemstream_entry_iterator_delete(struct pmemstream_entry_iterator **iterator); int pmemstream_region_iterator_new(struct pmemstream_region_iterator **iterator, struct pmemstream *stream); int pmemstream_region_iterator_is_valid(struct pmemstream_region_iterator *iterator); void pmemstream_region_iterator_seek_first(struct pmemstream_region_iterator *iterator); void pmemstream_region_iterator_next(struct pmemstream_region_iterator *iterator); struct pmemstream_region pmemstream_region_iterator_get(struct pmemstream_region_iterator *iterator); void pmemstream_region_iterator_delete(struct pmemstream_region_iterator **iterator); DESCRIPTION Most of API functions are called with struct pmemstream *stream as a first argument.</description></item><item><title>libpmemstream</title><link>https://pmem.io/pmemstream/manpages/master/libpmemstream.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemstream/manpages/master/libpmemstream.7/</guid><description>NAME
SYNOPSIS
DESCRIPTION
KNOWN CONSTRAINTS
USE CASES
EXAMPLES
SEE ALSO
NAME libpmemstream - a logging data structure optimized for persistent memory.
SYNOPSIS #include &amp;lt;libpmemstream.h&amp;gt; cc ... -lpmemstream DESCRIPTION Libpmemstream implements a pmem-optimized log data structure and provides stream-like access to data. It presents a contiguous logical address space, divided into regions, with log entries of arbitrary size. It delivers a generic, easy-to-use, well-tested set of functions. This library may be a foundation for various, more complex, higher-level solutions (see Use Cases section below).</description></item></channel></rss>