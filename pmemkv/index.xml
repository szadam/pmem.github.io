<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PMemkv on PMem.io</title><link>https://pmem.io/pmemkv/</link><description>Recent content in PMemkv on PMem.io</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://pmem.io/pmemkv/index.xml" rel="self" type="application/rss+xml"/><item><title>libpmemkv</title><link>https://pmem.io/pmemkv/v1.3/manpages/libpmemkv.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemkv/v1.3/manpages/libpmemkv.3/</guid><description>Table of Contents NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
ERRORS
SEE ALSO
NAME pmemkv - Key/Value Datastore for Persistent Memory
SYNOPSIS #include &amp;lt;libpmemkv.h&amp;gt; typedef int pmemkv_get_kv_callback(const char *key, size_t keybytes, const char *value, size_t valuebytes, void *arg); typedef void pmemkv_get_v_callback(const char *value, size_t valuebytes, void *arg); int pmemkv_open(const char *engine, pmemkv_config *config, pmemkv_db **db); void pmemkv_close(pmemkv_db *kv); int pmemkv_count_all(pmemkv_db *db, size_t *cnt); int pmemkv_count_above(pmemkv_db *db, const char *k, size_t kb, size_t *cnt); int pmemkv_count_below(pmemkv_db *db, const char *k, size_t kb, size_t *cnt); int pmemkv_count_between(pmemkv_db *db, const char *k1, size_t kb1, const char *k2, size_t kb2, size_t *cnt); int pmemkv_get_all(pmemkv_db *db, pmemkv_get_kv_callback *c, void *arg); int pmemkv_get_above(pmemkv_db *db, const char *k, size_t kb, pmemkv_get_kv_callback *c, void *arg); int pmemkv_get_below(pmemkv_db *db, const char *k, size_t kb, pmemkv_get_kv_callback *c, void *arg); int pmemkv_get_between(pmemkv_db *db, const char *k1, size_t kb1, const char *k2, size_t kb2, pmemkv_get_kv_callback *c, void *arg); int pmemkv_exists(pmemkv_db *db, const char *k, size_t kb); int pmemkv_get(pmemkv_db *db, const char *k, size_t kb, pmemkv_get_v_callback *c, void *arg); int pmemkv_get_copy(pmemkv_db *db, const char *k, size_t kb, char *buffer, size_t buffer_size, size_t *value_size); int pmemkv_put(pmemkv_db *db, const char *k, size_t kb, const char *v, size_t vb); int pmemkv_remove(pmemkv_db *db, const char *k, size_t kb); int pmemkv_defrag(pmemkv_db *db, double start_percent, double amount_percent); const char *pmemkv_errormsg(void); For pmemkv configuration API description see libpmemkv_config(3).</description></item><item><title>libpmemkv</title><link>https://pmem.io/pmemkv/v1.3/manpages/libpmemkv.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemkv/v1.3/manpages/libpmemkv.7/</guid><description>Table of Contents NAME
DESCRIPTION
ENGINES
BINDINGS
SEE ALSO
NAME pmemkv - Key/Value Datastore for Persistent Memory
DESCRIPTION pmemkv is a key-value datastore framework optimized for persistent memory. It provides native C API and C++ headers. Support for other languages is described in the BINDINGS section below.
It has multiple storage engines, each optimized for a different use case. They differ in implementation and capabilities:
persistence - this is a trade-off between data preservation and performance; persistent engines retain their content and are power fail/crash safe, but are slower; volatile engines are faster, but keep their content only until the database is closed (or application crashes; power fail occurs)</description></item><item><title>libpmemkv</title><link>https://pmem.io/pmemkv/v1.4/manpages/libpmemkv.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemkv/v1.4/manpages/libpmemkv.3/</guid><description>Table of Contents NAME
SYNOPSIS
DESCRIPTION
ERRORS
EXAMPLE
SEE ALSO
NAME pmemkv - Key/Value Datastore for Persistent Memory
SYNOPSIS #include &amp;lt;libpmemkv.h&amp;gt; typedef int pmemkv_get_kv_callback(const char *key, size_t keybytes, const char *value, size_t valuebytes, void *arg); typedef void pmemkv_get_v_callback(const char *value, size_t valuebytes, void *arg); int pmemkv_open(const char *engine, pmemkv_config *config, pmemkv_db **db); void pmemkv_close(pmemkv_db *kv); int pmemkv_count_all(pmemkv_db *db, size_t *cnt); int pmemkv_count_above(pmemkv_db *db, const char *k, size_t kb, size_t *cnt); int pmemkv_count_below(pmemkv_db *db, const char *k, size_t kb, size_t *cnt); int pmemkv_count_between(pmemkv_db *db, const char *k1, size_t kb1, const char *k2, size_t kb2, size_t *cnt); int pmemkv_get_all(pmemkv_db *db, pmemkv_get_kv_callback *c, void *arg); int pmemkv_get_above(pmemkv_db *db, const char *k, size_t kb, pmemkv_get_kv_callback *c, void *arg); int pmemkv_get_below(pmemkv_db *db, const char *k, size_t kb, pmemkv_get_kv_callback *c, void *arg); int pmemkv_get_between(pmemkv_db *db, const char *k1, size_t kb1, const char *k2, size_t kb2, pmemkv_get_kv_callback *c, void *arg); int pmemkv_exists(pmemkv_db *db, const char *k, size_t kb); int pmemkv_get(pmemkv_db *db, const char *k, size_t kb, pmemkv_get_v_callback *c, void *arg); int pmemkv_get_copy(pmemkv_db *db, const char *k, size_t kb, char *buffer, size_t buffer_size, size_t *value_size); int pmemkv_put(pmemkv_db *db, const char *k, size_t kb, const char *v, size_t vb); int pmemkv_remove(pmemkv_db *db, const char *k, size_t kb); int pmemkv_defrag(pmemkv_db *db, double start_percent, double amount_percent); const char *pmemkv_errormsg(void); For pmemkv configuration API description see libpmemkv_config(3).</description></item><item><title>libpmemkv</title><link>https://pmem.io/pmemkv/v1.4/manpages/libpmemkv.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemkv/v1.4/manpages/libpmemkv.7/</guid><description>Table of Contents NAME
DESCRIPTION
ENGINES
BINDINGS
SEE ALSO
NAME pmemkv - Key/Value Datastore for Persistent Memory
DESCRIPTION pmemkv is a key-value datastore framework optimized for persistent memory. It provides native C API and C++ headers. Support for other languages is described in the BINDINGS section below.
It has multiple storage engines, each optimized for a different use case. They differ in implementation and capabilities:
persistence - this is a trade-off between data preservation and performance; persistent engines retain their content and are power fail/crash safe, but are slower; volatile engines are faster, but keep their content only until the database is closed (or application crashes; power fail occurs)</description></item><item><title>libpmemkv | PMDK</title><link>https://pmem.io/pmemkv/master/manpages/libpmemkv.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemkv/master/manpages/libpmemkv.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
ERRORS
EXAMPLE
SEE ALSO
NAME pmemkv - Key/Value Datastore for Persistent Memory
SYNOPSIS #include &amp;lt;libpmemkv.h&amp;gt; typedef int pmemkv_get_kv_callback(const char *key, size_t keybytes, const char *value, size_t valuebytes, void *arg); typedef void pmemkv_get_v_callback(const char *value, size_t valuebytes, void *arg); int pmemkv_open(const char *engine, pmemkv_config *config, pmemkv_db **db); void pmemkv_close(pmemkv_db *kv); int pmemkv_count_all(pmemkv_db *db, size_t *cnt); int pmemkv_count_above(pmemkv_db *db, const char *k, size_t kb, size_t *cnt); int pmemkv_count_below(pmemkv_db *db, const char *k, size_t kb, size_t *cnt); int pmemkv_count_between(pmemkv_db *db, const char *k1, size_t kb1, const char *k2, size_t kb2, size_t *cnt); int pmemkv_get_all(pmemkv_db *db, pmemkv_get_kv_callback *c, void *arg); int pmemkv_get_above(pmemkv_db *db, const char *k, size_t kb, pmemkv_get_kv_callback *c, void *arg); int pmemkv_get_below(pmemkv_db *db, const char *k, size_t kb, pmemkv_get_kv_callback *c, void *arg); int pmemkv_get_between(pmemkv_db *db, const char *k1, size_t kb1, const char *k2, size_t kb2, pmemkv_get_kv_callback *c, void *arg); int pmemkv_exists(pmemkv_db *db, const char *k, size_t kb); int pmemkv_get(pmemkv_db *db, const char *k, size_t kb, pmemkv_get_v_callback *c, void *arg); int pmemkv_get_copy(pmemkv_db *db, const char *k, size_t kb, char *buffer, size_t buffer_size, size_t *value_size); int pmemkv_put(pmemkv_db *db, const char *k, size_t kb, const char *v, size_t vb); int pmemkv_remove(pmemkv_db *db, const char *k, size_t kb); int pmemkv_defrag(pmemkv_db *db, double start_percent, double amount_percent); const char *pmemkv_errormsg(void); For pmemkv configuration API description see libpmemkv_config(3).</description></item><item><title>libpmemkv | PMDK</title><link>https://pmem.io/pmemkv/master/manpages/libpmemkv.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemkv/master/manpages/libpmemkv.7/</guid><description>NAME
DESCRIPTION
ENGINES
BINDINGS
SEE ALSO
NAME pmemkv - Key/Value Datastore for Persistent Memory
DESCRIPTION pmemkv is a key-value datastore framework optimized for persistent memory. It provides native C API and C++ headers. Support for other languages is described in the BINDINGS section below.
It has multiple storage engines, each optimized for a different use case. They differ in implementation and capabilities:
persistence - this is a trade-off between data preservation and performance; persistent engines retain their content and are power fail/crash safe, but are slower; volatile engines are faster, but keep their content only until the database is closed (or application crashes; power fail occurs)</description></item><item><title>libpmemkv | PMDK</title><link>https://pmem.io/pmemkv/master/manpages/libpmemkv_config.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemkv/master/manpages/libpmemkv_config.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
ERRORS
EXAMPLE
SEE ALSO
NAME pmemkv_config - Configuration API for libpmemkv
SYNOPSIS #include &amp;lt;libpmemkv.h&amp;gt; pmemkv_config *pmemkv_config_new(void); void pmemkv_config_delete(pmemkv_config *config); int pmemkv_config_put_size(pmemkv_config *config, uint64_t value); int pmemkv_config_put_path(pmemkv_config *config, const char *value); int **deprecated** pmemkv_config_put_force_create(pmemkv_config *config, bool value); int pmemkv_config_put_create_or_error_if_exists(pmemkv_config *config, bool value); int pmemkv_config_put_create_if_missing(pmemkv_config *config, bool value) int pmemkv_config_put_comparator(pmemkv_config *config, pmemkv_comparator *comparator); int pmemkv_config_put_oid(pmemkv_config *config, PMEMoid *oid); int pmemkv_config_put_data(pmemkv_config *config, const char *key, const void *value, size_t value_size); int pmemkv_config_put_object(pmemkv_config *config, const char *key, void *value, void (*deleter)(void *)); int pmemkv_config_put_object_cb(pmemkv_config *config, const char *key, void *value, void *(*getter)(void *), void (*deleter)(void *)); int pmemkv_config_put_uint64(pmemkv_config *config, const char *key, uint64_t value); int pmemkv_config_put_int64(pmemkv_config *config, const char *key, int64_t value); int pmemkv_config_put_string(pmemkv_config *config, const char *key, const char *value); int pmemkv_config_get_data(pmemkv_config *config, const char *key, const void **value, size_t *value_size); int pmemkv_config_get_object(pmemkv_config *config, const char *key, void **value); int pmemkv_config_get_uint64(pmemkv_config *config, const char *key, uint64_t *value); int pmemkv_config_get_int64(pmemkv_config *config, const char *key, int64_t *value); int pmemkv_config_get_string(pmemkv_config *config, const char *key, const char **value); pmemkv_comparator *pmemkv_comparator_new(pmemkv_compare_function *fn, const char *name, void *arg); void pmemkv_comparator_delete(pmemkv_comparator *comparator); For general description of pmemkv and available engines see libpmemkv(7).</description></item><item><title>libpmemkv | PMDK</title><link>https://pmem.io/pmemkv/master/manpages/libpmemkv_iterator.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemkv/master/manpages/libpmemkv_iterator.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
ERRORS
EXAMPLE
SEE ALSO
NAME pmemkv_iterator - Iterator API for libpmemkv
This API is EXPERIMENTAL and might change.
SYNOPSIS #include &amp;lt;libpmemkv.h&amp;gt; int pmemkv_iterator_new(pmemkv_db *db, pmemkv_iterator **it); int pmemkv_write_iterator_new(pmemkv_db *db, pmemkv_write_iterator **it); void pmemkv_iterator_delete(pmemkv_iterator *it); void pmemkv_write_iterator_delete(pmemkv_write_iterator *it); int pmemkv_iterator_seek(pmemkv_iterator *it, const char *k, size_t kb); int pmemkv_iterator_seek_lower(pmemkv_iterator *it, const char *k, size_t kb); int pmemkv_iterator_seek_lower_eq(pmemkv_iterator *it, const char *k, size_t kb); int pmemkv_iterator_seek_higher(pmemkv_iterator *it, const char *k, size_t kb); int pmemkv_iterator_seek_higher_eq(pmemkv_iterator *it, const char *k, size_t kb); int pmemkv_iterator_seek_to_first(pmemkv_iterator *it); int pmemkv_iterator_seek_to_last(pmemkv_iterator *it); int pmemkv_iterator_is_next(pmemkv_iterator *it); int pmemkv_iterator_next(pmemkv_iterator *it); int pmemkv_iterator_prev(pmemkv_iterator *it); int pmemkv_iterator_key(pmemkv_iterator *it, const char **k, size_t *kb); int pmemkv_iterator_read_range(pmemkv_iterator *it, size_t pos, size_t n, const char **data, size_t *rb); int pmemkv_write_iterator_write_range(pmemkv_write_iterator *it, size_t pos, size_t n, char **data, size_t *wb); int pmemkv_write_iterator_commit(pmemkv_write_iterator *it); void pmemkv_write_iterator_abort(pmemkv_write_iterator *it); For general description of pmemkv and available engines see libpmemkv(7).</description></item><item><title>libpmemkv | PMDK</title><link>https://pmem.io/pmemkv/master/manpages/libpmemkv_json_config.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemkv/master/manpages/libpmemkv_json_config.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
ERRORS
EXAMPLE
SEE ALSO
NAME pmemkv_json_config - helper configuration API for libpmemkv
SYNOPSIS #include &amp;lt;libpmemkv_json_config.h&amp;gt; int pmemkv_config_from_json(pmemkv_config *config, const char *jsonconfig); const char *pmemkv_config_from_json_errormsg(void); For general description of pmemkv and available engines see libpmemkv(7). For description of pmemkv core API see libpmemkv(3). For description of configuration API for libpmemkv see libpmemkv_config(3).
DESCRIPTION pmemkv_json_config is a helper library that provides two functions:
int pmemkv_config_from_json(pmemkv_config *config, const char *jsonconfig); Parses JSON string and puts all items found in JSON into config.</description></item><item><title>libpmemkv | PMDK</title><link>https://pmem.io/pmemkv/master/manpages/libpmemkv_tx.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemkv/master/manpages/libpmemkv_tx.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
ERRORS
EXAMPLE
SEE ALSO
NAME pmemkv_tx - Transactions API for libpmemkv
This API is EXPERIMENTAL and might change.
SYNOPSIS #include &amp;lt;libpmemkv.h&amp;gt; int pmemkv_tx_begin(pmemkv_db *db, pmemkv_tx **tx); int pmemkv_tx_put(pmemkv_tx *tx, const char *k, size_t kb, const char *v, size_t vb); int pmemkv_tx_remove(pmemkv_tx *tx, const char *k, size_t kb); int pmemkv_tx_commit(pmemkv_tx *tx); void pmemkv_tx_abort(pmemkv_tx *tx); void pmemkv_tx_end(pmemkv_tx *tx); DESCRIPTION The transaction allows grouping put and remove operations into a single atomic action (with respect to persistence and concurrency).</description></item><item><title>libpmemkv | PMDK</title><link>https://pmem.io/pmemkv/v1.0/manpages/libpmemkv.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemkv/v1.0/manpages/libpmemkv.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemkv | PMDK</title><link>https://pmem.io/pmemkv/v1.0/manpages/libpmemkv.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemkv/v1.0/manpages/libpmemkv.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemkv | PMDK</title><link>https://pmem.io/pmemkv/v1.0/manpages/libpmemkv_config.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemkv/v1.0/manpages/libpmemkv_config.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemkv | PMDK</title><link>https://pmem.io/pmemkv/v1.0/manpages/libpmemkv_json_config.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemkv/v1.0/manpages/libpmemkv_json_config.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemkv | PMDK</title><link>https://pmem.io/pmemkv/v1.1/manpages/libpmemkv.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemkv/v1.1/manpages/libpmemkv.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemkv | PMDK</title><link>https://pmem.io/pmemkv/v1.1/manpages/libpmemkv.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemkv/v1.1/manpages/libpmemkv.7/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemkv | PMDK</title><link>https://pmem.io/pmemkv/v1.1/manpages/libpmemkv_config.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemkv/v1.1/manpages/libpmemkv_config.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemkv | PMDK</title><link>https://pmem.io/pmemkv/v1.1/manpages/libpmemkv_json_config.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemkv/v1.1/manpages/libpmemkv_json_config.3/</guid><description>comment: &amp;lt;&amp;gt; (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT) comment: &amp;lt;&amp;gt; (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,) comment: &amp;lt;&amp;gt; (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY) comment: &amp;lt;&amp;gt; (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT) comment: &amp;lt;&amp;gt; ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE) comment: &amp;lt;&amp;gt; (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</description></item><item><title>libpmemkv | PMDK</title><link>https://pmem.io/pmemkv/v1.2/manpages/libpmemkv.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemkv/v1.2/manpages/libpmemkv.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
ERRORS
SEE ALSO
NAME pmemkv - Key/Value Datastore for Persistent Memory
SYNOPSIS #include &amp;lt;libpmemkv.h&amp;gt; typedef int pmemkv_get_kv_callback(const char *key, size_t keybytes, const char *value, size_t valuebytes, void *arg); typedef void pmemkv_get_v_callback(const char *value, size_t valuebytes, void *arg); int pmemkv_open(const char *engine, pmemkv_config *config, pmemkv_db **db); void pmemkv_close(pmemkv_db *kv); int pmemkv_count_all(pmemkv_db *db, size_t *cnt); int pmemkv_count_above(pmemkv_db *db, const char *k, size_t kb, size_t *cnt); int pmemkv_count_below(pmemkv_db *db, const char *k, size_t kb, size_t *cnt); int pmemkv_count_between(pmemkv_db *db, const char *k1, size_t kb1, const char *k2, size_t kb2, size_t *cnt); int pmemkv_get_all(pmemkv_db *db, pmemkv_get_kv_callback *c, void *arg); int pmemkv_get_above(pmemkv_db *db, const char *k, size_t kb, pmemkv_get_kv_callback *c, void *arg); int pmemkv_get_below(pmemkv_db *db, const char *k, size_t kb, pmemkv_get_kv_callback *c, void *arg); int pmemkv_get_between(pmemkv_db *db, const char *k1, size_t kb1, const char *k2, size_t kb2, pmemkv_get_kv_callback *c, void *arg); int pmemkv_exists(pmemkv_db *db, const char *k, size_t kb); int pmemkv_get(pmemkv_db *db, const char *k, size_t kb, pmemkv_get_v_callback *c, void *arg); int pmemkv_get_copy(pmemkv_db *db, const char *k, size_t kb, char *buffer, size_t buffer_size, size_t *value_size); int pmemkv_put(pmemkv_db *db, const char *k, size_t kb, const char *v, size_t vb); int pmemkv_remove(pmemkv_db *db, const char *k, size_t kb); int pmemkv_defrag(pmemkv_db *db, double start_percent, double amount_percent); const char *pmemkv_errormsg(void); For pmemkv configuration API description see libpmemkv_config(3).</description></item><item><title>libpmemkv | PMDK</title><link>https://pmem.io/pmemkv/v1.2/manpages/libpmemkv.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemkv/v1.2/manpages/libpmemkv.7/</guid><description>NAME
DESCRIPTION
ENGINES
BINDINGS
SEE ALSO
NAME pmemkv - Key/Value Datastore for Persistent Memory
DESCRIPTION pmemkv is a key-value datastore framework optimized for persistent memory. It provides native C API and C++ headers. Support for other languages is described in the BINDINGS section below.
It has multiple storage engines, each optimized for a different use case. They differ in implementation and capabilities:
persistence - this is a trade-off between data preservation and performance; persistent engines retain their content and are power fail/crash safe, but are slower; volatile engines are faster, but keep their content only until the database is closed (or application crashes; power fail occurs)</description></item><item><title>libpmemkv | PMDK</title><link>https://pmem.io/pmemkv/v1.2/manpages/libpmemkv_config.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemkv/v1.2/manpages/libpmemkv_config.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
ERRORS
SEE ALSO
NAME pmemkv_config - Configuration API for libpmemkv
SYNOPSIS #include &amp;lt;libpmemkv.h&amp;gt; pmemkv_config *pmemkv_config_new(void); void pmemkv_config_delete(pmemkv_config *config); int pmemkv_config_put_data(pmemkv_config *config, const char *key, const void *value, size_t value_size); int pmemkv_config_put_object(pmemkv_config *config, const char *key, void *value, void (*deleter)(void *)); int pmemkv_config_put_object_cb(pmemkv_config *config, const char *key, void *value, void *(*getter)(void *), void (*deleter)(void *)); int pmemkv_config_put_uint64(pmemkv_config *config, const char *key, uint64_t value); int pmemkv_config_put_int64(pmemkv_config *config, const char *key, int64_t value); int pmemkv_config_put_string(pmemkv_config *config, const char *key, const char *value); int pmemkv_config_get_data(pmemkv_config *config, const char *key, const void **value, size_t *value_size); int pmemkv_config_get_object(pmemkv_config *config, const char *key, void **value); int pmemkv_config_get_uint64(pmemkv_config *config, const char *key, uint64_t *value); int pmemkv_config_get_int64(pmemkv_config *config, const char *key, int64_t *value); int pmemkv_config_get_string(pmemkv_config *config, const char *key, const char **value); pmemkv_comparator *pmemkv_comparator_new(pmemkv_compare_function *fn, const char *name, void *arg); void pmemkv_comparator_delete(pmemkv_comparator *comparator); For general description of pmemkv and available engines see libpmemkv(7).</description></item><item><title>libpmemkv | PMDK</title><link>https://pmem.io/pmemkv/v1.2/manpages/libpmemkv_json_config.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemkv/v1.2/manpages/libpmemkv_json_config.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
ERRORS
SEE ALSO
NAME pmemkv_json_config - helper configuration API for libpmemkv
SYNOPSIS #include &amp;lt;libpmemkv_json_config.h&amp;gt; int pmemkv_config_from_json(pmemkv_config *config, const char *jsonconfig); const char *pmemkv_config_from_json_errormsg(void); For general description of pmemkv and available engines see libpmemkv(7). For description of pmemkv core API see libpmemkv(3). For description of configuration API for libpmemkv see libpmemkv_config(3).
DESCRIPTION pmemkv_json_config is a helper library that provides two functions:
int pmemkv_config_from_json(pmemkv_config *config, const char *jsonconfig); Parses JSON string and puts all items found in JSON into config.</description></item><item><title>libpmemkv | PMDK</title><link>https://pmem.io/pmemkv/v1.5/manpages/libpmemkv.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemkv/v1.5/manpages/libpmemkv.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
ERRORS
EXAMPLE
SEE ALSO
NAME pmemkv - Key/Value Datastore for Persistent Memory
SYNOPSIS #include &amp;lt;libpmemkv.h&amp;gt; typedef int pmemkv_get_kv_callback(const char *key, size_t keybytes, const char *value, size_t valuebytes, void *arg); typedef void pmemkv_get_v_callback(const char *value, size_t valuebytes, void *arg); int pmemkv_open(const char *engine, pmemkv_config *config, pmemkv_db **db); void pmemkv_close(pmemkv_db *kv); int pmemkv_count_all(pmemkv_db *db, size_t *cnt); int pmemkv_count_above(pmemkv_db *db, const char *k, size_t kb, size_t *cnt); int pmemkv_count_below(pmemkv_db *db, const char *k, size_t kb, size_t *cnt); int pmemkv_count_between(pmemkv_db *db, const char *k1, size_t kb1, const char *k2, size_t kb2, size_t *cnt); int pmemkv_get_all(pmemkv_db *db, pmemkv_get_kv_callback *c, void *arg); int pmemkv_get_above(pmemkv_db *db, const char *k, size_t kb, pmemkv_get_kv_callback *c, void *arg); int pmemkv_get_below(pmemkv_db *db, const char *k, size_t kb, pmemkv_get_kv_callback *c, void *arg); int pmemkv_get_between(pmemkv_db *db, const char *k1, size_t kb1, const char *k2, size_t kb2, pmemkv_get_kv_callback *c, void *arg); int pmemkv_exists(pmemkv_db *db, const char *k, size_t kb); int pmemkv_get(pmemkv_db *db, const char *k, size_t kb, pmemkv_get_v_callback *c, void *arg); int pmemkv_get_copy(pmemkv_db *db, const char *k, size_t kb, char *buffer, size_t buffer_size, size_t *value_size); int pmemkv_put(pmemkv_db *db, const char *k, size_t kb, const char *v, size_t vb); int pmemkv_remove(pmemkv_db *db, const char *k, size_t kb); int pmemkv_defrag(pmemkv_db *db, double start_percent, double amount_percent); const char *pmemkv_errormsg(void); For pmemkv configuration API description see libpmemkv_config(3).</description></item><item><title>libpmemkv | PMDK</title><link>https://pmem.io/pmemkv/v1.5/manpages/libpmemkv.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemkv/v1.5/manpages/libpmemkv.7/</guid><description>NAME
DESCRIPTION
ENGINES
BINDINGS
SEE ALSO
NAME pmemkv - Key/Value Datastore for Persistent Memory
DESCRIPTION pmemkv is a key-value datastore framework optimized for persistent memory. It provides native C API and C++ headers. Support for other languages is described in the BINDINGS section below.
It has multiple storage engines, each optimized for a different use case. They differ in implementation and capabilities:
persistence - this is a trade-off between data preservation and performance; persistent engines retain their content and are power fail/crash safe, but are slower; volatile engines are faster, but keep their content only until the database is closed (or application crashes; power fail occurs)</description></item><item><title>libpmemkv | PMDK</title><link>https://pmem.io/pmemkv/v1.5/manpages/libpmemkv_config.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemkv/v1.5/manpages/libpmemkv_config.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
ERRORS
EXAMPLE
SEE ALSO
NAME pmemkv_config - Configuration API for libpmemkv
SYNOPSIS #include &amp;lt;libpmemkv.h&amp;gt; pmemkv_config *pmemkv_config_new(void); void pmemkv_config_delete(pmemkv_config *config); int pmemkv_config_put_size(pmemkv_config *config, uint64_t value); int pmemkv_config_put_path(pmemkv_config *config, const char *value); int **deprecated** pmemkv_config_put_force_create(pmemkv_config *config, bool value); int pmemkv_config_put_create_or_error_if_exists(pmemkv_config *config, bool value); int pmemkv_config_put_create_if_missing(pmemkv_config *config, bool value) int pmemkv_config_put_comparator(pmemkv_config *config, pmemkv_comparator *comparator); int pmemkv_config_put_oid(pmemkv_config *config, PMEMoid *oid); int pmemkv_config_put_data(pmemkv_config *config, const char *key, const void *value, size_t value_size); int pmemkv_config_put_object(pmemkv_config *config, const char *key, void *value, void (*deleter)(void *)); int pmemkv_config_put_object_cb(pmemkv_config *config, const char *key, void *value, void *(*getter)(void *), void (*deleter)(void *)); int pmemkv_config_put_uint64(pmemkv_config *config, const char *key, uint64_t value); int pmemkv_config_put_int64(pmemkv_config *config, const char *key, int64_t value); int pmemkv_config_put_string(pmemkv_config *config, const char *key, const char *value); int pmemkv_config_get_data(pmemkv_config *config, const char *key, const void **value, size_t *value_size); int pmemkv_config_get_object(pmemkv_config *config, const char *key, void **value); int pmemkv_config_get_uint64(pmemkv_config *config, const char *key, uint64_t *value); int pmemkv_config_get_int64(pmemkv_config *config, const char *key, int64_t *value); int pmemkv_config_get_string(pmemkv_config *config, const char *key, const char **value); pmemkv_comparator *pmemkv_comparator_new(pmemkv_compare_function *fn, const char *name, void *arg); void pmemkv_comparator_delete(pmemkv_comparator *comparator); For general description of pmemkv and available engines see libpmemkv(7).</description></item><item><title>libpmemkv | PMDK</title><link>https://pmem.io/pmemkv/v1.5/manpages/libpmemkv_iterator.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemkv/v1.5/manpages/libpmemkv_iterator.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
ERRORS
EXAMPLE
SEE ALSO
NAME pmemkv_iterator - Iterator API for libpmemkv
This API is EXPERIMENTAL and might change.
SYNOPSIS #include &amp;lt;libpmemkv.h&amp;gt; int pmemkv_iterator_new(pmemkv_db *db, pmemkv_iterator **it); int pmemkv_write_iterator_new(pmemkv_db *db, pmemkv_write_iterator **it); void pmemkv_iterator_delete(pmemkv_iterator *it); void pmemkv_write_iterator_delete(pmemkv_write_iterator *it); int pmemkv_iterator_seek(pmemkv_iterator *it, const char *k, size_t kb); int pmemkv_iterator_seek_lower(pmemkv_iterator *it, const char *k, size_t kb); int pmemkv_iterator_seek_lower_eq(pmemkv_iterator *it, const char *k, size_t kb); int pmemkv_iterator_seek_higher(pmemkv_iterator *it, const char *k, size_t kb); int pmemkv_iterator_seek_higher_eq(pmemkv_iterator *it, const char *k, size_t kb); int pmemkv_iterator_seek_to_first(pmemkv_iterator *it); int pmemkv_iterator_seek_to_last(pmemkv_iterator *it); int pmemkv_iterator_is_next(pmemkv_iterator *it); int pmemkv_iterator_next(pmemkv_iterator *it); int pmemkv_iterator_prev(pmemkv_iterator *it); int pmemkv_iterator_key(pmemkv_iterator *it, const char **k, size_t *kb); int pmemkv_iterator_read_range(pmemkv_iterator *it, size_t pos, size_t n, const char **data, size_t *rb); int pmemkv_write_iterator_write_range(pmemkv_write_iterator *it, size_t pos, size_t n, char **data, size_t *wb); int pmemkv_write_iterator_commit(pmemkv_write_iterator *it); void pmemkv_write_iterator_abort(pmemkv_write_iterator *it); For general description of pmemkv and available engines see libpmemkv(7).</description></item><item><title>libpmemkv | PMDK</title><link>https://pmem.io/pmemkv/v1.5/manpages/libpmemkv_json_config.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemkv/v1.5/manpages/libpmemkv_json_config.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
ERRORS
EXAMPLE
SEE ALSO
NAME pmemkv_json_config - helper configuration API for libpmemkv
SYNOPSIS #include &amp;lt;libpmemkv_json_config.h&amp;gt; int pmemkv_config_from_json(pmemkv_config *config, const char *jsonconfig); const char *pmemkv_config_from_json_errormsg(void); For general description of pmemkv and available engines see libpmemkv(7). For description of pmemkv core API see libpmemkv(3). For description of configuration API for libpmemkv see libpmemkv_config(3).
DESCRIPTION pmemkv_json_config is a helper library that provides two functions:
int pmemkv_config_from_json(pmemkv_config *config, const char *jsonconfig); Parses JSON string and puts all items found in JSON into config.</description></item><item><title>libpmemkv | PMDK</title><link>https://pmem.io/pmemkv/v1.5/manpages/libpmemkv_tx.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemkv/v1.5/manpages/libpmemkv_tx.3/</guid><description>NAME
SYNOPSIS
DESCRIPTION
ERRORS
EXAMPLE
SEE ALSO
NAME pmemkv_tx - Transactions API for libpmemkv
This API is EXPERIMENTAL and might change.
SYNOPSIS #include &amp;lt;libpmemkv.h&amp;gt; int pmemkv_tx_begin(pmemkv_db *db, pmemkv_tx **tx); int pmemkv_tx_put(pmemkv_tx *tx, const char *k, size_t kb, const char *v, size_t vb); int pmemkv_tx_remove(pmemkv_tx *tx, const char *k, size_t kb); int pmemkv_tx_commit(pmemkv_tx *tx); void pmemkv_tx_abort(pmemkv_tx *tx); void pmemkv_tx_end(pmemkv_tx *tx); DESCRIPTION The transaction allows grouping put and remove operations into a single atomic action (with respect to persistence and concurrency).</description></item><item><title>libpmemkv_config</title><link>https://pmem.io/pmemkv/v1.3/manpages/libpmemkv_config.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemkv/v1.3/manpages/libpmemkv_config.3/</guid><description>Table of Contents NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
ERRORS
SEE ALSO
NAME pmemkv_config - Configuration API for libpmemkv
SYNOPSIS #include &amp;lt;libpmemkv.h&amp;gt; pmemkv_config *pmemkv_config_new(void); void pmemkv_config_delete(pmemkv_config *config); int pmemkv_config_put_size(pmemkv_config *config, uint64_t value); int pmemkv_config_put_path(pmemkv_config *config, const char *value); int pmemkv_config_put_force_create(pmemkv_config *config, bool value); int pmemkv_config_put_comparator(pmemkv_config *config, pmemkv_comparator *comparator); int pmemkv_config_put_oid(pmemkv_config *config, PMEMoid *oid); int pmemkv_config_put_data(pmemkv_config *config, const char *key, const void *value, size_t value_size); int pmemkv_config_put_object(pmemkv_config *config, const char *key, void *value, void (*deleter)(void *)); int pmemkv_config_put_object_cb(pmemkv_config *config, const char *key, void *value, void *(*getter)(void *), void (*deleter)(void *)); int pmemkv_config_put_uint64(pmemkv_config *config, const char *key, uint64_t value); int pmemkv_config_put_int64(pmemkv_config *config, const char *key, int64_t value); int pmemkv_config_put_string(pmemkv_config *config, const char *key, const char *value); int pmemkv_config_get_data(pmemkv_config *config, const char *key, const void **value, size_t *value_size); int pmemkv_config_get_object(pmemkv_config *config, const char *key, void **value); int pmemkv_config_get_uint64(pmemkv_config *config, const char *key, uint64_t *value); int pmemkv_config_get_int64(pmemkv_config *config, const char *key, int64_t *value); int pmemkv_config_get_string(pmemkv_config *config, const char *key, const char **value); pmemkv_comparator *pmemkv_comparator_new(pmemkv_compare_function *fn, const char *name, void *arg); void pmemkv_comparator_delete(pmemkv_comparator *comparator); For general description of pmemkv and available engines see libpmemkv(7).</description></item><item><title>libpmemkv_config</title><link>https://pmem.io/pmemkv/v1.4/manpages/libpmemkv_config.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemkv/v1.4/manpages/libpmemkv_config.3/</guid><description>Table of Contents NAME
SYNOPSIS
DESCRIPTION
ERRORS
EXAMPLE
SEE ALSO
NAME pmemkv_config - Configuration API for libpmemkv
SYNOPSIS #include &amp;lt;libpmemkv.h&amp;gt; pmemkv_config *pmemkv_config_new(void); void pmemkv_config_delete(pmemkv_config *config); int pmemkv_config_put_size(pmemkv_config *config, uint64_t value); int pmemkv_config_put_path(pmemkv_config *config, const char *value); int pmemkv_config_put_force_create(pmemkv_config *config, bool value); int pmemkv_config_put_comparator(pmemkv_config *config, pmemkv_comparator *comparator); int pmemkv_config_put_oid(pmemkv_config *config, PMEMoid *oid); int pmemkv_config_put_data(pmemkv_config *config, const char *key, const void *value, size_t value_size); int pmemkv_config_put_object(pmemkv_config *config, const char *key, void *value, void (*deleter)(void *)); int pmemkv_config_put_object_cb(pmemkv_config *config, const char *key, void *value, void *(*getter)(void *), void (*deleter)(void *)); int pmemkv_config_put_uint64(pmemkv_config *config, const char *key, uint64_t value); int pmemkv_config_put_int64(pmemkv_config *config, const char *key, int64_t value); int pmemkv_config_put_string(pmemkv_config *config, const char *key, const char *value); int pmemkv_config_get_data(pmemkv_config *config, const char *key, const void **value, size_t *value_size); int pmemkv_config_get_object(pmemkv_config *config, const char *key, void **value); int pmemkv_config_get_uint64(pmemkv_config *config, const char *key, uint64_t *value); int pmemkv_config_get_int64(pmemkv_config *config, const char *key, int64_t *value); int pmemkv_config_get_string(pmemkv_config *config, const char *key, const char **value); pmemkv_comparator *pmemkv_comparator_new(pmemkv_compare_function *fn, const char *name, void *arg); void pmemkv_comparator_delete(pmemkv_comparator *comparator); For general description of pmemkv and available engines see libpmemkv(7).</description></item><item><title>libpmemkv_iterator</title><link>https://pmem.io/pmemkv/v1.4/manpages/libpmemkv_iterator.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemkv/v1.4/manpages/libpmemkv_iterator.3/</guid><description>Table of Contents NAME
SYNOPSIS
DESCRIPTION
ERRORS
EXAMPLE
SEE ALSO
NAME pmemkv_iterator - Iterator API for libpmemkv
This API is EXPERIMENTAL and might change.
SYNOPSIS #include &amp;lt;libpmemkv.h&amp;gt; int pmemkv_iterator_new(pmemkv_db *db, pmemkv_iterator **it); int pmemkv_write_iterator_new(pmemkv_db *db, pmemkv_write_iterator **it); void pmemkv_iterator_delete(pmemkv_iterator *it); void pmemkv_write_iterator_delete(pmemkv_write_iterator *it); int pmemkv_iterator_seek(pmemkv_iterator *it, const char *k, size_t kb); int pmemkv_iterator_seek_lower(pmemkv_iterator *it, const char *k, size_t kb); int pmemkv_iterator_seek_lower_eq(pmemkv_iterator *it, const char *k, size_t kb); int pmemkv_iterator_seek_higher(pmemkv_iterator *it, const char *k, size_t kb); int pmemkv_iterator_seek_higher_eq(pmemkv_iterator *it, const char *k, size_t kb); int pmemkv_iterator_seek_to_first(pmemkv_iterator *it); int pmemkv_iterator_seek_to_last(pmemkv_iterator *it); int pmemkv_iterator_is_next(pmemkv_iterator *it); int pmemkv_iterator_next(pmemkv_iterator *it); int pmemkv_iterator_prev(pmemkv_iterator *it); int pmemkv_iterator_key(pmemkv_iterator *it, const char **k, size_t *kb); int pmemkv_iterator_read_range(pmemkv_iterator *it, size_t pos, size_t n, const char **data, size_t *rb); int pmemkv_write_iterator_write_range(pmemkv_write_iterator *it, size_t pos, size_t n, char **data, size_t *wb); int pmemkv_write_iterator_commit(pmemkv_write_iterator *it); void pmemkv_write_iterator_abort(pmemkv_write_iterator *it); For general description of pmemkv and available engines see libpmemkv(7).</description></item><item><title>libpmemkv_tx</title><link>https://pmem.io/pmemkv/v1.4/manpages/libpmemkv_tx.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemkv/v1.4/manpages/libpmemkv_tx.3/</guid><description>Table of Contents NAME
SYNOPSIS
DESCRIPTION
ERRORS
EXAMPLE
SEE ALSO
NAME pmemkv_tx - Transactions API for libpmemkv
This API is EXPERIMENTAL and might change.
SYNOPSIS #include &amp;lt;libpmemkv.h&amp;gt; int pmemkv_tx_begin(pmemkv_db *db, pmemkv_tx **tx); int pmemkv_tx_put(pmemkv_tx *tx, const char *k, size_t kb, const char *v, size_t vb); int pmemkv_tx_remove(pmemkv_tx *tx, const char *k, size_t kb); int pmemkv_tx_commit(pmemkv_tx *tx); void pmemkv_tx_abort(pmemkv_tx *tx); void pmemkv_tx_end(pmemkv_tx *tx); DESCRIPTION The transaction allows grouping put and remove operations into a single atomic action (with respect to persistence and concurrency).</description></item><item><title>Performance reports | PMemKV</title><link>https://pmem.io/pmemkv/reports/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemkv/reports/</guid><description>We’ve executed benchmarks to get an idea of the results’ approximate order of magnitude. For most cases we used pmemkv-bench benchmark, based on leveldb’s db_bench.
See each individual pdf report for Hardware, OS, Software, benchmarks, etc. details.
Currently available reports:
Intel® Xeon® Platinum 8280L + Ubuntu 20.04 kernel 5.4</description></item><item><title>pmemkv_json_config</title><link>https://pmem.io/pmemkv/v1.3/manpages/libpmemkv_json_config.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemkv/v1.3/manpages/libpmemkv_json_config.3/</guid><description>Table of Contents NAME
SYNOPSIS
DESCRIPTION
EXAMPLE
ERRORS
SEE ALSO
NAME pmemkv_json_config - helper configuration API for libpmemkv
SYNOPSIS #include &amp;lt;libpmemkv_json_config.h&amp;gt; int pmemkv_config_from_json(pmemkv_config *config, const char *jsonconfig); const char *pmemkv_config_from_json_errormsg(void); For general description of pmemkv and available engines see libpmemkv(7). For description of pmemkv core API see libpmemkv(3). For description of configuration API for libpmemkv see libpmemkv_config(3).
DESCRIPTION pmemkv_json_config is a helper library that provides two functions:
int pmemkv_config_from_json(pmemkv_config *config, const char *jsonconfig); Parses JSON string and puts all items found in JSON into config.</description></item><item><title>pmemkv_json_config</title><link>https://pmem.io/pmemkv/v1.4/manpages/libpmemkv_json_config.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pmem.io/pmemkv/v1.4/manpages/libpmemkv_json_config.3/</guid><description>Table of Contents NAME
SYNOPSIS
DESCRIPTION
ERRORS
EXAMPLE
SEE ALSO
NAME pmemkv_json_config - helper configuration API for libpmemkv
SYNOPSIS #include &amp;lt;libpmemkv_json_config.h&amp;gt; int pmemkv_config_from_json(pmemkv_config *config, const char *jsonconfig); const char *pmemkv_config_from_json_errormsg(void); For general description of pmemkv and available engines see libpmemkv(7). For description of pmemkv core API see libpmemkv(3). For description of configuration API for libpmemkv see libpmemkv_config(3).
DESCRIPTION pmemkv_json_config is a helper library that provides two functions:
int pmemkv_config_from_json(pmemkv_config *config, const char *jsonconfig); Parses JSON string and puts all items found in JSON into config.</description></item></channel></rss>